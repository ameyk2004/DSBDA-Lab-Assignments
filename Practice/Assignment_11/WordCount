// 9 Imports

// 4 
import org.apache.hadoop.util.*;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.io.*;
import org.apache.hadoop.fs.*;

//3
import org.apache.hadoop.mapreduce.*;
import org.apache.hadoop.mapreduce.lib.input;
import org.apache.hadoop.mapreduce.lib.output;

import java.util.*;
import java.io.IOException;

public class WordCount{

    public static class TokenMapper extends Mapper<Object, Text, Text, IntWritable>{

        public final Text word = new Text();
        public static final IntWritable one = new IntWritable(1);

        public void map(Object key, Text value, Context context) throws IOException, InterruptedException(){

            String str_line = value.toString();
            StringTokenizer tokenizer = new StringTokenizer(str_line);

            while(tokenizer.hasMoreTokens()){
                word.set(tokenizer.nextToken());
                context.write(word, one);
            }

        }
    }

    public static class IntSumReducer extends Reducer<Text, IntWritable, Text, IntWritable>{

        public final IntWritable result = new IntWritable();

        public void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException(){

            int sum = 0;
            for(IntWritable value : values){
                sum+=value.get();
            }

            result.set(sum);
            context.write(key, result);

        }
    }

    public static void main(String[] args) throws Exception {

        Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "word count");

        job.setMapperClass(TokenMapper.class);
        job.setReducerClass(IntSumReducer.class);
        job.setCombinerClass(IntSumReducer.class);
        job.setJarByClass(WordCount.class);
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(IntWritable.class);

        String[] otherArgs = new GenericOptionsParser(conf, args).getRemainingArgs();
        
        FileInputFormat.addInputPath(job, new Path(otherArgs[0]));
        FileOutputFormat.setOutputPath(job, new Path(otherArgs[1]));

        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }

}

